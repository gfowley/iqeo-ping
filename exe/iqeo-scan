#!/usr/bin/env ruby
require 'gli'
require 'iqeo/scan'
require 'pry'
require 'awesome_print'

def wait_for time
  Timeout.timeout time do
    sleep 0.1 until yield
  end
end

include GLI::App

program_desc 'Network scanner'

version Iqeo::Scan::VERSION

subcommand_option_handling :normal
arguments :strict
sort_help :manually

class UpperArray < Array ; end
accept UpperArray do |param|
  UpperArray.new( param.split(',').map { |item| item.strip.upcase } )
end

class NumberArray < Array ; end
accept NumberArray do |param|
  NumberArray.new( param.split(',').map{ |item| item.strip.to_i } )
end

switch [:c, :color],   default_value: true, desc: 'Color output'
switch [:d, :debug],   negatable: false,    desc: 'Debugging output and error stacktrace' 
switch [:v, :verbose], negatable: false,    desc: 'Verbose output'

flag   [:w, :timeout], desc: 'Global timeout',   default_value: 30

pre do |global_options,command,options,args|
  ENV['GLI_DEBUG'] = 'true' if global_options[:d]
  true
end

desc 'Scan hosts to detect if up.'
long_desc 'Detects if hosts are up and open services. Defaults to ICMP (if root) and common TCP ports for speed.'
arg 'hosts-specification', :multiple
command :scan do |c|

  c.flag [:p, :protocols],
    desc:          'Protocols: one or more of [ICMP, TCP, UDP]',
    default_value: UpperArray.new( Iqeo::Scan::Scanner::DEFAULT_PROTOCOLS.map { |p| p.to_s.upcase } ),
    must_match:    /(icmp|tcp|udp)(,(icmp|tcp|udp))*/i,
    type:          UpperArray

  c.flag [:t, :tcp],
    desc:          'TCP ports',
    default_value: Iqeo::Scan::Scanner::DEFAULT_TCP_PORTS,
    must_match:    /(\d+)(,(\d+))*/,
    type:          NumberArray

  c.flag [:u, :udp],
    desc: 'UDP ports',
    default_value: Iqeo::Scan::Scanner::DEFAULT_UDP_PORTS,
    must_match:    /(\d+)(,(\d+))*/,
    type:          NumberArray

  c.flag [:w, :timeout],   desc: 'Timeout',   default_value: Iqeo::Scan::Scanner::DEFAULT_TIMEOUT
  c.flag [:a, :attempts],  desc: 'Attempts',  default_value: Iqeo::Scan::Scanner::DEFAULT_ATTEMPTS

  c.action do |global_options,options,args|

    ap options if global_options[:debug]

    services = Hash[
      options[:protocols].map { |p| p.downcase.to_sym }.map do |protocol|
        [ protocol, options[protocol] ]
      end
    ]

    ap services if global_options[:debug]

    scanners = args.map do |hostspec|
      Iqeo::Scan::Scanner.new hostspec, services: services
    end
    scanners.each(&:start)

    wait_for( global_options[:timeout] ) do
      scanners.all?(&:finished?)
    end     

    ap scanners.map(&:results) if global_options[:debug]

    output = scanners.map do |scanner|
      scanner.results.map do |host,result|
        [
          "#{host} #{result[:state]}",
          result[:scan].map do |protocol,ports|
            ports.map do |number,port|
              "#{protocol}/#{number} #{port[:state]}"
            end
          end.flatten
        ]
      end
    end.flatten
    puts output.join("\n")

  end

end

exit run(ARGV)

